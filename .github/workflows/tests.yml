# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Tests

on:
  push:
    paths-ignore:
      - 'docs/**'

    branches:
      - master
      - active_dev

  pull_request:
    paths-ignore:
      - 'docs/**'

    branches:
      - '**'

jobs:
  tests:
    name: ubuntu-latest / ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        shell: bash
        run: |
          python -m ensurepip
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Configure poetry
        shell: bash
        run: python -m poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s python -m poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        shell: bash
        run: python -m poetry install

      - name: Run pytest
        shell: bash
        run: |
          pip install pytest
          pip install pytest-cov
          pytest tests --cov=comment_coder

      # Only run the coverage once
      - if: ${{ matrix.python-version == '3.7' }}
        name: Get Coverage for badge
        run: |
          pip install pytest
          pip install pytest-cov
          SUMMARY_CONV="$(echo $SUMMARY | sed -n 's/.*\(TOTAL\).[0-9].[0-9].\([0-9]*\)%.*/\2/p')"
          echo $SUMMARY_CONV

          SUMMARY="$(pytest tests --cov=comment_coder)"
          COVERAGEVALUE="$(echo $SUMMARY | sed -n 's/.*\(TOTAL\).[0-9].[0-9].\([0-9]*\)%.*/\2/p')"
          echo "coverage_value: $COVERAGEVALUE"
          echo "COVERAGE=$(echo $COVERAGEVALUE)" >> $GITHUB_ENV

          ENVCOVERAGE=${{ env.COVERAGE }}
          echo "coverage: $ENVCOVERAGE"

          REF=${{ github.ref }}
          echo "github.ref: $REF"
          IFS='/' read -ra PATHS <<< "$REF"
          BRANCH_NAME="${PATHS[1]}_${PATHS[2]}"
          echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV

      - if: ${{ matrix.python-version == '3.7' }}
        name: Create the Badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: f6472a1fdbc684e918544851f9efc77a
          filename: comment-coder__${{ env.BRANCH }}.json
          label: Test Coverage
          message: ${{ env.COVERAGE }}
          color: green
          namedLogo: jest